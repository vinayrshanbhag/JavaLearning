package com.learning.SingleTonPattern;

public class DBManager {
	
	private static DBManager  instance;
	
	private  DBManager() throws InterruptedException {
		
		if(instance!=null){
			throw new RuntimeException ();
		}
		System.out.println("created...");
		
	} 
	
	@Override
	public String toString() {
	
		return String.format("%s %d", getClass().getName(),hashCode());
	}

	public static synchronized DBManager getInstace() throws InterruptedException {
		
		if(instance ==null){ 
			System.out.println("Checking again");
			synchronized (DBManager.class) {
				if(instance == null){
					instance = new DBManager();
				}
				
				
			}
			instance = new DBManager();
		}
		
		return  instance;
	}

}



Sample Class

	
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException {
		
		
		ExecutorService executorService = Executors.newFixedThreadPool(10);
		executorService.submit(() -> {
			try {
				createDBInstance();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		executorService.submit(() -> {
			try {
				createDBInstance();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		 
		
		/*DBManager dbManager = DBManager.getInstace();
		System.out.println(dbManager);
		
		DBManager dbManager1 = DBManager.getInstace();
	    System.out.println(dbManager1);*/
	    
	    /*Constructor<DBManager> constructor=  DBManager.class.getDeclaredConstructor();
		constructor.setAccessible(true);
		DBManager dbManager2 = (DBManager)constructor.newInstance();
		System.out.println(dbManager2);*/
	    
	    executorService.shutdown();
	  
	}
	
	
	public static void createDBInstance() throws InterruptedException{
		 System.out.println(DBManager.getInstace());
	}

	
